
/*CSS ONLY SUPPORTS MULTI-LINE COMMENTS*/
//LESS SUPPORTS ONE-LINE COMMENTS - THEY ARE NOT GOING TO BE PRESENT ON THE CSS FILE
//LESS VARIABLE
/*FIRST LESS VARIABLE DECLARATION RESULT*/
@bg-base: #eee;
@font-base: 1 em Helvetica, Arial, sans-serif;

* {
  box-sizing: border-box;
}

body {
  background-color: @bg-base;
}

//LESS NESTING

/*LESS NESTING RESULT*/
header{
  padding: 10px;
  background-color: #333;

  > h1 {
    background-color: @bg-base;
  }

  p {
    color: #fff;
    font: @font-base;
  }
}
//& - PREDECESOR REFERENCE
a {
    color: red;
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
}
// &  is replaced by the entire hierarchy of ancestors
/* & RESULT*/
.boton {
  &-ok {
    color: green;
  }

  &-error {
    color: red;
  }
}

.fatherClass {
  .childClass {
    & > h1 {
      color: blue;
    }
  }
}

.fatherClass {
  .childClass {
    .grandFatherClass & {
      color: red;
    }
  }
}
//Aply the & rule to all the possible combinations
/* & + & RESULT*/
div, p, span {
  & + & {
    color: white;
  }
}

//VARIABLES - DEEP EXPLANATION

@div-name: test-img;
@fsize: font-size;
@fweight: font-weight;
@message: 'hello';
@hello: 'Hello LESS';
//WHE CAN USE VARIABLES TO BUILD ELEMENTS
//VARIABLE INTERPOLATION

/*VARIABLE INTERPOLATION RESULT*/
#@{div-name} {
  @bg-base: #fc0;
  height: 200px;
  color: #ff;
  @{fsize}: 24px;
  @{fweight}: bold;
  background-color: @bg-base;

}

#@{div-name}-2 {
  color: #333;
  background-color: @bg-base;

//@@VARIABLE IS A VARIABLE FROM A VARIABLE
  &:after{
    content: @@message;
  }
}
//VARIABLE SCOPE.
//FIRST IT SEARCH INTO HIS RULE IF IT DOESN'T FIND THE VARIABLE, IT UP A LEVEL .
//IF IT CONTINUE SEARCHING IN ALL THE HIERARCHY AND DOESN'T FIND ANYTHING, SEND AN ERROR MESSAGE .

//DEFAULT FUNCTIONS AND OPERATIONS

/*LESS DEFAULT FUNCTIONS AND OPERATIONS RESULT*/
@width: 100%;
@border-base: 1px;
@border-extra: 3;
@bg-middle: @bg-base / 2;
@bg-alternative: @bg-base - #15a;

.column-2 {
  float: left;
  box-sizing: border-box;
  width: @width/2;
  padding: 10px;
  border: @border-base solid #3333;
  background-color: @bg-alternative;
}

.column-4 {
  float: left;
  box-sizing: border-box;
  width: @width/4;
  padding: 10px;
  border: @border-base solid #3333;
  background-color: spin(saturate(@bg-alternative,40%),10);
}

.clearfix {
  clear: both;
}

.special-column {
  border-width: @border-base + @border-extra;
}

//EXTEND
//LINK AN STYLE WITH ANOTHERONE
//WHE CAN'T USE A PSEUDO-SELECTOR LIKE  :hover BEHIND EXTEND
//EXTEND HAS TO BE ALWAYS THE LAST PSEUDO-SELECTOR
//WHE CAN CONCAT EXTEND

/*LESS EXTEND RESULT*/
.selectorA {
  color: #aaa;
}

.selectorA > a{
  text-decoration: none;
}

.selectorA > a:hover {
  text-decoration: underline;
}

.selectorB {
  //&:extend(.selectorA);
  border: : 1px solid #fff;
}

// HAS TO BE A COINCIDENCE
.selectorC:extend(.selectorA, .selectorB) {
  background-color: #fc0;
}
//USE ALL TO APLY IT TO ALL SELECTOR VARIANTS
/*LESS EXTEND ALL RESULT*/
.selectorD:extend(.selectorA all, .selectorB) {
  background-color: #ccc;
}
//LIKE VARIABLES, EXTENDS APLY IN A SCOPE
//GIVE SENCE WHEN WE USE MEDIA QUERIES
//DOESN'T FIND DUPLICATIONS
//IS BETTER FOR CODE REUSE
//IT'S USED TO TAKE ADVANTAGE OF THE ANOTHER SELECTOR PROPERTIES

//MERGE
//IT IS THE CAPACITY TO JOIN DIFERENTS VALUES FOR THE SAME PROPERTY OF A SELECTOR
/*LESS MERGE RESULT*/
@routeBaseImg: '../img/';
.alert {
  background+:url('@{routeBaseImg}bg/alternative');
  background-repeat+: no-repeat;
  background-position+: center;
}
// + MAKE AN ADVICE TO LESS THAT HE HAS TO CONCAT THE PROPERTY VALUES
.alert-ok {
  //esto es lo mismo que poner
  //.alert;
  background+:url('@{routeBaseImg}bg/alternative');
  background-repeat+: no-repeat;
  background-position+: center;

  background+:url('@{routeBaseImg}bg/alternative');
  background-repeat+: no-repeat;
  background-position+: left top;
}


//IMPORT FILES
/*IMPORT RESULTS*/
//SET THE IMPORT SELECTOR AT THE END
@import "base.less";
.extended:extend(.base){
  border: 1px solid #ccc;
}

//THIS IS ONLY FOR .less FILES, NOT FOR .css FILES
/*IMPORT (REFERENCE) RESULT*/
@import (reference) "base.less";
.extended:extend(.base){
  border: 1px solid #ccc;
}

@import "base.css"; //THIS SETS THE SELECTOR AT THE BEGINING
@import (inline) "base.css"; //INCCLUDES THE FILE CONTENT
//IF THE INLE COMMAND IS USED IN A .less FILE, IT DOESN'T PARSE THE CODE
@import (less) "base.css";//FORCE A .less FILE BEHAVIOR
@import (css) "base.less";//FORCE A .css FILE BEHAVIOR
@import (once) "base.less";//FORCE ONLY ONE FILE IMPORT
@import (multiple) "base.less";//FORCE MULTIPLES FILE IMPORT


//CONDITIONALS
/*CONDITIONALS RESULT*/
& when (@message = 'Hello') {
  .farewell {
    color: white;
  }
}

& when ( isnumber(@message) = false) {
  .farewell2 {
    color: blue;
  }
}

//LOOPS
/*LOOPS RESULT*/
.loop(@i) when (@i > 0) {
  .loop((@i - 1));
  width: (100px/@i);
}

section {
  .loop(3);
}

.generate-columns(@n, @i:1) when (@i =< @n) {
  .col-@{i} {
    width: (@i*100%/@n);
  }
  .generate-columns(@n,(@i + 1));
}
.generate-columns(4);

//MIXIN
//COMBINE DIFERENTS STYLE PROPERTIE
//() DOESN'T SHOWS THE CLASS IN THE .css FILE
/*MIXIN RESULT*/
.alrt() {
  text-align: center;
  background-color: #aaa;
  // IN MIXINS WHE CAN USE &
  &:hover {
    bacground-color: #eee;
  }
}
.alrt-ok {
  .alrt();
  color: green;
}

.alrt-error {
    .alrt(); //WE CAN CALL THE MIXXIN LIKE A FUNCTION
    color: red;
}

//MIXIN WITH FUNCTIONS AND PARAMETERS
/*MIXIN WITH FUNCTIONS AND PARAMETERS RESULT*/
.myCalc()
{
  @width: 10px;
  @heigth: 5px;
  @result: @width*@heigth/15;
}

article {
  .myCalc();
  padding: @result;
}
//PARAMETERS

.myCalc2(@width, @height)
{
  @result: @width*@height/15;
}

article {
  .myCalc2(10px, 5px);
  padding: @result;
}
//WE CAN HAVE DEFAULT VALUES IN  PAREMETERS
.myCalc3(@width: 10px, @height: 2px)
{
  @result: @width*@height/15;
}
//THE DEFAULTS ARE USED ONLY WHEN WE DON'T SEND VALUES TO THE FUNCTION
//IF WE SEND VALUES TO THE FUNCTION THEY ARE GOING TO OVERWRITE THE DEFAULT VALUES

//WE CAN ADD THE PARAMETER NAME IN THE FUNCTION CALL AND ALSO WE CAN CHANGE THE PARAMETERS ORDER
article {
  .myCalc3(@width: 2px, @height: 10px);
  padding: @result;
}

//@arguments HAS ALL THE PARAMETER VALUES
.myCalc4(@width: 10px, @height: 2px)
{
  border: @arguments; //IT RESPECT THE FUNCTIOMN DEFINITION ORDEN - IT DOESN'T PAY ATTENTION TO THE FUNCTION CALL ORDER
  @result: @width*@height/15;
}
article {
  .myCalc4(10px, 5px);
  padding: @result;
}

//WE CAN EXECUTE DIFERENTS FORMATS AND OPERATIONS FROM A SAME MIXIN WITH A VARIABLE VALUE
/*FORMATS AND OPERATION RESULT*/
.format(claro; @color){
  background-color: lighten(@color, 10%);
}
.format(oscuro; @color){
  background-color: darken(@color, 10%);
}

//PROPERTIES THAT WE ALWAYS WANT TO INCLUDE IN A MIXIN
.format(@_; @color){
  border-color: @color;
}
@myFormat: claro; //WE CAN APLY DIFERENT STYLES TO A LOT OF SELECTORS IN FUNCTION OF A CALCULATED VALUE
p.especial{
  .format(@myFormat, #fc0);
}

//RULES AND MIXINS IN LESS

//RULES LIKE PARAMETERS IN A MIXIN

/*RULES LIKE PARAMETERS IN A MIXIN RESULT*/
.old-browsers(@rules){
  html.old & { @rules(); }
}
@myRules:{
    background-color: blue;
};
header {
  //COMON STYLE
  color: #333;
  .old-browsers(@myRules);
}

footer {
  //COMON STYLE
  color: #333;
  .old-browsers({
      border: 1px solid white;
      background-color: red;
  });
}

//MIXIN CONDITIONAL (Guards)
/*MIXIN CONDITIONAL (GUARDS) RESULT*/
.aplyColorBackground(@color) when (iscolor(@color)=true){
  background-color: @color;
}

.element1 {
  text-align: left;
  .aplyColorBackground('Hello');
}

.element2 {
  text-align: left;
  .aplyColorBackground(#fc0);
}
